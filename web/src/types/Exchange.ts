/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExchangeInterface extends utils.Interface {
  functions: {
    "PttToTokenInputSwap(uint256,uint256,uint256)": FunctionFragment;
    "PttToTokenOutputSwap(uint256,uint256,uint256)": FunctionFragment;
    "TokenToTokenInputSwap(uint256,uint256,uint256,address)": FunctionFragment;
    "TokenToTokenOutputSwap(uint256,uint256,uint256,address)": FunctionFragment;
    "TokentoPttInputSwap(uint256,uint256,uint256)": FunctionFragment;
    "TokentoPttOutputSwap(uint256,uint256,uint256)": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getInputPrice(uint256,uint256,uint256)": FunctionFragment;
    "getOutputPrice(uint256,uint256,uint256)": FunctionFragment;
    "getPttToTokenInputPrice(uint256)": FunctionFragment;
    "getPttToTokenOutputPrice(uint256)": FunctionFragment;
    "getReserve(address)": FunctionFragment;
    "getTokenToPttInputPrice(uint256)": FunctionFragment;
    "getTokenToPttOutputPrice(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "pttAddress()": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PttToTokenInputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PttToTokenOutputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenToTokenInputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenToTokenOutputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "TokentoPttInputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TokentoPttOutputSwap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPttToTokenInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPttToTokenOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReserve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenToPttInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToPttOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pttAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PttToTokenInputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PttToTokenOutputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenToTokenInputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenToTokenOutputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokentoPttInputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokentoPttOutputSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPttToTokenInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPttToTokenOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToPttInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToPttOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pttAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Addliquidity(address,address,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Removeliquidity(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "swap(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Addliquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removeliquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "swap"): EventFragment;
}

export type AddliquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; tokenAmount: BigNumber; pttAmount: BigNumber }
>;

export type AddliquidityEventFilter = TypedEventFilter<AddliquidityEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type RemoveliquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; tokenAmount: BigNumber; pttAmount: BigNumber }
>;

export type RemoveliquidityEventFilter = TypedEventFilter<RemoveliquidityEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type swapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    from: string;
    to: string;
    user: string;
    fromAmount: BigNumber;
    toAmount: BigNumber;
  }
>;

export type swapEventFilter = TypedEventFilter<swapEvent>;

export interface Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PttToTokenInputSwap(
      _ptt_sold: BigNumberish,
      _min_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    PttToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TokenToTokenInputSwap(
      _token_sold: BigNumberish,
      _min_token_bought: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TokenToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_token_sold: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TokentoPttInputSwap(
      _token_sold: BigNumberish,
      _min_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TokentoPttOutputSwap(
      _ptt_bought: BigNumberish,
      _max_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      _pttAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getInputPrice(
      _inputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutputPrice(
      _outputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPttToTokenInputPrice(
      _ptt_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPttToTokenOutputPrice(
      _token_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserve(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToPttInputPrice(
      _token_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToPttOutputPrice(
      _ptt_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pttAddress(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _amount: BigNumberish,
      _minppt: BigNumberish,
      _mintoken: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PttToTokenInputSwap(
    _ptt_sold: BigNumberish,
    _min_token: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  PttToTokenOutputSwap(
    _token_bought: BigNumberish,
    _max_ptt: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TokenToTokenInputSwap(
    _token_sold: BigNumberish,
    _min_token_bought: BigNumberish,
    deadline: BigNumberish,
    _tokenaddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TokenToTokenOutputSwap(
    _token_bought: BigNumberish,
    _max_token_sold: BigNumberish,
    deadline: BigNumberish,
    _tokenaddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TokentoPttInputSwap(
    _token_sold: BigNumberish,
    _min_ptt: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TokentoPttOutputSwap(
    _ptt_bought: BigNumberish,
    _max_token: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    _pttAmount: BigNumberish,
    _tokenAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getInputPrice(
    _inputAmount: BigNumberish,
    _inputReserve: BigNumberish,
    _outputReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutputPrice(
    _outputAmount: BigNumberish,
    _inputReserve: BigNumberish,
    _outputReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPttToTokenInputPrice(
    _ptt_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPttToTokenOutputPrice(
    _token_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserve(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToPttInputPrice(
    _token_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToPttOutputPrice(
    _ptt_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pttAddress(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _amount: BigNumberish,
    _minppt: BigNumberish,
    _mintoken: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PttToTokenInputSwap(
      _ptt_sold: BigNumberish,
      _min_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PttToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToTokenInputSwap(
      _token_sold: BigNumberish,
      _min_token_bought: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_token_sold: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokentoPttInputSwap(
      _token_sold: BigNumberish,
      _min_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokentoPttOutputSwap(
      _ptt_bought: BigNumberish,
      _max_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _pttAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    getInputPrice(
      _inputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _outputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPttToTokenInputPrice(
      _ptt_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPttToTokenOutputPrice(
      _token_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToPttInputPrice(
      _token_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToPttOutputPrice(
      _ptt_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    pttAddress(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _amount: BigNumberish,
      _minppt: BigNumberish,
      _mintoken: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Addliquidity(address,address,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      tokenAmount?: null,
      pttAmount?: null
    ): AddliquidityEventFilter;
    Addliquidity(
      token?: string | null,
      user?: string | null,
      tokenAmount?: null,
      pttAmount?: null
    ): AddliquidityEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Removeliquidity(address,address,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      tokenAmount?: null,
      pttAmount?: null
    ): RemoveliquidityEventFilter;
    Removeliquidity(
      token?: string | null,
      user?: string | null,
      tokenAmount?: null,
      pttAmount?: null
    ): RemoveliquidityEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "swap(address,address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      user?: string | null,
      fromAmount?: null,
      toAmount?: null
    ): swapEventFilter;
    swap(
      from?: string | null,
      to?: string | null,
      user?: string | null,
      fromAmount?: null,
      toAmount?: null
    ): swapEventFilter;
  };

  estimateGas: {
    PttToTokenInputSwap(
      _ptt_sold: BigNumberish,
      _min_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    PttToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TokenToTokenInputSwap(
      _token_sold: BigNumberish,
      _min_token_bought: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TokenToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_token_sold: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TokentoPttInputSwap(
      _token_sold: BigNumberish,
      _min_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TokentoPttOutputSwap(
      _ptt_bought: BigNumberish,
      _max_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      _pttAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      _inputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _outputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPttToTokenInputPrice(
      _ptt_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPttToTokenOutputPrice(
      _token_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToPttInputPrice(
      _token_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToPttOutputPrice(
      _ptt_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pttAddress(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      _minppt: BigNumberish,
      _mintoken: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PttToTokenInputSwap(
      _ptt_sold: BigNumberish,
      _min_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    PttToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TokenToTokenInputSwap(
      _token_sold: BigNumberish,
      _min_token_bought: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TokenToTokenOutputSwap(
      _token_bought: BigNumberish,
      _max_token_sold: BigNumberish,
      deadline: BigNumberish,
      _tokenaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TokentoPttInputSwap(
      _token_sold: BigNumberish,
      _min_ptt: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TokentoPttOutputSwap(
      _ptt_bought: BigNumberish,
      _max_token: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _pttAmount: BigNumberish,
      _tokenAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInputPrice(
      _inputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      _outputAmount: BigNumberish,
      _inputReserve: BigNumberish,
      _outputReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPttToTokenInputPrice(
      _ptt_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPttToTokenOutputPrice(
      _token_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToPttInputPrice(
      _token_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToPttOutputPrice(
      _ptt_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pttAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      _minppt: BigNumberish,
      _mintoken: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
